name: Spring Boot CI/CD

on: 
  push: 
    branches: 
      - main

jobs:
  build-and-deploy: 
    runs-on: ubuntu-latest 
    steps: 
      # 1. 저장소 클론
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. JDK 설정
      - name: Set up JDK
        uses: actions/setup-java@v3
        with: 
          java-version: '21'
          distribution: 'temurin'

      # 3. gradlew 실행 권한 부여
      - name: Grant execute permission for Gradlew
        run: chmod +x gradlew

      # 4. 빌드
      - name: Build with Gradle
        run: ./gradlew clean build -x test --no-daemon

            # 5. DockerHub 로그인
      - name: DockerHub Login
        uses: docker/login-action@v2
        with: 
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}



      # 6. Docker 이미지 빌드 및 푸시
      - name: Build and push Docker Image
        run: |
          IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/lmsyncserver
          TAG=${{ github.sha }}

          docker build -t $IMAGE_NAME:$TAG .
          docker tag $IMAGE_NAME:$TAG $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$TAG
          docker push $IMAGE_NAME:latest

      # 7. EC2에 SSH로 접속해 배포
      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@v0.1.8
        with: 
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_KEY }}
          script: |
            IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/lmsyncserver
            TAG=${{ github.sha }}

            docker pull $IMAGE_NAME:$TAG
            docker stop lmsyncserver || true
            docker rm lmsyncserver || true
            docker rmi -f $(docker images -q --filter=reference="$IMAGE_NAME:*" --filter "dangling=false" | grep -v $(docker images -q $IMAGE_NAME:$TAG)) || true
            export DB_HOST=${{ secrets.DB_HOST }}
            export DB_PORT=${{ secrets.DB_PORT }}
            export DB_NAME=${{ secrets.DB_NAME }}
            export DB_USER=${{ secrets.DB_USER }}
            export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            export JWT_SECRET_CODE=${{ secrets.JWT_SECRET_CODE }}
            export MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
            docker run -d -p 19091:19091 -e DB_HOST -e DB_PORT -e DB_NAME -e DB_USER -e DB_PASSWORD -e JWT_SECRET_CODE -e MAIL_PASSWORD --name lmsyncserver $IMAGE_NAME:$TAG --spring.profiles.active=prod


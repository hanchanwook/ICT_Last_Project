package com.jakdang.labs.api.lnuyasha.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.jakdang.labs.api.common.EducationId;
import com.jakdang.labs.api.lnuyasha.dto.SubjectInfoDTO;
import com.jakdang.labs.api.lnuyasha.service.KySubjectService;
import com.jakdang.labs.api.youngjae.dto.ResponseDTO;
import com.jakdang.labs.api.auth.dto.CustomUserDetails;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@RestController
@RequestMapping("/api/subjects")
public class KySubjectController {
    
    private final KySubjectService kySubjectService;
    private final EducationId educationId;

    public KySubjectController(KySubjectService kySubjectService, EducationId educationId) {
        this.kySubjectService = kySubjectService;
        this.educationId = educationId;
    }

    // 과목 목록 조회 (educationId 동일한 과목 목록 조회)
    @GetMapping("/all")
    public ResponseDTO<List<SubjectInfoDTO>> getSubjects() {
        try {
            
            // SecurityContextHolder에서 현재 인증된 사용자 정보 가져오기
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            if (authentication == null || !(authentication.getPrincipal() instanceof CustomUserDetails)) {
                return ResponseDTO.createErrorResponse(400, "인증된 사용자 정보를 찾을 수 없습니다.");
            }
            
            CustomUserDetails userDetails = (CustomUserDetails) authentication.getPrincipal();
            String userId = userDetails.getUserId();
            
            // EducationId 컴포넌트를 사용해서 educationId 조회 
            Optional<String> educationIdOpt = educationId.getEducationIdByUserId(userId);
            if (educationIdOpt.isEmpty()) {
                return ResponseDTO.createErrorResponse(400, "사용자의 educationId를 찾을 수 없습니다.");
            }
            
            String userEducationId = educationIdOpt.get();
            
            // 과목 목록 조회
            // 과목들의  모든 값을 조회해야 함 
            List<SubjectInfoDTO> subjects = kySubjectService.getSubjectsByEducationId(userEducationId);
    
            return ResponseDTO.createSuccessResponse("과목 목록 조회가 완료되었습니다.", subjects);
        } catch (Exception e) {
            return ResponseDTO.createErrorResponse(500, "과목 목록 조회 중 오류가 발생했습니다: " + e.getMessage());
        }
    }

}
